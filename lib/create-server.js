// Generated by CoffeeScript 1.8.0
(function() {
  var Listener, Service, UDP, UDPHoleService,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  UDP = require("dgram");

  Listener = (function() {
    function Listener(port, host) {
      this.port = port;
      this.host = host != null ? host : "0.0.0.0";
      this.listen = __bind(this.listen, this);
      this.socket = UDP.createSocket("udp4");
    }

    Listener.prototype.listen = function() {
      return this.socket.bind(this.port, this.host);
    };

    Listener.prototype.send = function(host, data, done) {
      var encodedData;
      encodedData = new Buffer(JSON.stringify(data));
      return this.socket.send(encodedData, 0, encodedData.length, host.port, host.address, done);
    };

    return Listener;

  })();

  Service = (function() {
    function Service(listener, name, type) {
      this.listener = listener;
      this.name = name;
      this.type = type != null ? type : "single";
      this.start = __bind(this.start, this);
      this.broadcastHosts = __bind(this.broadcastHosts, this);
      this.addHost = __bind(this.addHost, this);
      this.hosts = [];
      this.heartbeatInterval = setInterval((function(_this) {
        return function() {
          return _this.broadcastHosts("heartbeat", 200, {});
        };
      })(this), 2500);
    }

    Service.prototype.addHost = function(privateInfo, publicInfo) {
      this.broadcastHosts("connect", 200, {
        hosts: [
          {
            "private": privateInfo,
            "public": publicInfo
          }
        ]
      });
      this.send(publicInfo, "connect", 200, {
        hosts: this.hosts
      });
      if ((this.type === "single" && this.hosts.length === 0) || (this.type === "swarm")) {
        this.hosts.push({
          "private": privateInfo,
          "public": publicInfo
        });
        return console.log("Host added to service \'" + this.name + "\'");
      }
    };

    Service.prototype.broadcastHosts = function(request, status, data, done) {
      var connection, host, _i, _len, _ref, _results;
      _ref = this.hosts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        connection = _ref[_i];
        host = connection["private"];
        _results.push(this.send(host, request, status, data, done));
      }
      return _results;
    };

    Service.prototype.send = function(host, request, status, data, done) {
      data.status = status || data.status;
      data.request = request || data.request;
      return this.listener.send(host, data, done);
    };

    Service.prototype.start = function() {
      return this.listener.socket.bind(this.l);
    };

    return Service;

  })();

  UDPHoleService = (function() {
    function UDPHoleService(options) {
      this.options = options;
      this.createService = __bind(this.createService, this);
      this.service = __bind(this.service, this);
      this.handleServiceConnection = __bind(this.handleServiceConnection, this);
      this.handleServiceRegistration = __bind(this.handleServiceRegistration, this);
      this.initProtocol = __bind(this.initProtocol, this);
      this.services = {};
      this.options.port = this.options.port || 1338;
      this.options.host = this.options.host || "0.0.0.0";
      this.listener = this.createListener(this.options.port, this.options.host);
      this.initProtocol();
    }

    UDPHoleService.prototype.initProtocol = function() {
      return this.listener.socket.on("message", (function(_this) {
        return function(encodedData, publicInfo) {
          var data, ex;
          try {
            data = JSON.parse(encodedData);
            _this.validateMessage(data);
          } catch (_error) {
            ex = _error;
            return console.log("Exception occured during parse: " + ex.message);
          }
          if (data.request === "register") {
            _this.handleServiceRegistration(data, publicInfo);
          }
          if (data.request === "connect") {
            return _this.handleServiceConnection(data, publicInfo);
          }
        };
      })(this));
    };

    UDPHoleService.prototype.validateMessage = function(json) {
      if (json == null) {
        throw new Error("Invalid json specified");
      }
      if (json.request == null) {
        throw new Error("Request is missing \'request\' attribute");
      }
      if (json.status == null) {
        throw new Error("Request is missing \'status\' attribute");
      }
    };

    UDPHoleService.prototype.handleServiceRegistration = function(data, publicInfo) {
      var service;
      service = this.services[data.service.name];
      if (service == null) {
        data.service.type = data.service.type || "single";
        data.service.host = data.service.host || true;
        this.service(data.service.name, data.service.type).addHost(data["private"], publicInfo);
        return this.send(publicInfo, "register", 200, {
          message: "up"
        });
      } else {
        return this.send(publicInfo, "register", 409, {
          message: "Service already registered"
        });
      }
    };

    UDPHoleService.prototype.handleServiceConnection = function(data, publicInfo) {
      var service;
      data.service.type = data.service.type || "single";
      service = this.services[data.service.name];
      if ((service != null) && service.type === data.service.type) {
        return service.addHost(data["private"], publicInfo);
      } else {
        if (data.service.type === "swarm") {
          return this.service(data.service.name, data.service.type).addHost(data["private"], publicInfo);
        } else {
          return this.send(publicInfo, "connect", 404, {
            message: "Service not found"
          });
        }
      }
    };

    UDPHoleService.prototype.service = function(name, type) {
      if (type == null) {
        type = "single";
      }
      this.services[name] = this.services[name] || this.createService(name, type);
      return this.services[name];
    };

    UDPHoleService.prototype.createListener = function(port, host) {
      if (host == null) {
        host = "0.0.0.0";
      }
      return new Listener(port, host);
    };

    UDPHoleService.prototype.createService = function(name, type) {
      return new Service(this.listener, name, type);
    };

    UDPHoleService.prototype.send = function(host, request, status, data, done) {
      data.status = status || data.status;
      data.request = request || data.request;
      return this.listener.send(host, data, done);
    };

    UDPHoleService.prototype.start = function() {
      return this.listener.listen();
    };

    return UDPHoleService;

  })();

  module.exports.create = function(options) {
    return new UDPHoleService(options);
  };

}).call(this);
